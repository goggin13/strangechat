import json
import sys
import os
import time
import re
ROOT = os.path.dirname(os.path.abspath(__file__))
MINIFY_THEN_COMBINE = True
COMBINE_ONLY = False

# reads the configuration file, iterates the groups, combines them
# and minifies the result
def main(config):
   config = File(config)
   contents = config.getContents()
   JSON = json.loads(contents)
   for groupName in JSON: 
      aggregator = Aggregator(JSON[groupName], groupName)
      if not MINIFY_THEN_COMBINE:
         aggregator.minify()
      aggregator.addComment()         
      aggregator.showStats()

# compresser functions
class Compressor():
   pathToCompressor = os.path.join(os.path.dirname( __file__ ), 'yuicompressor-2.4.2.jar')
   miniCommand = 'java -jar %s -o %s %s'
   
   def compress(self, destPath, srcPath):
      cmd = self.miniCommand % (self.pathToCompressor, destPath, srcPath)
      os.system(cmd)
      
   def compressGetContents(self, destPath, srcPath):
      self.compress(destPath, srcPath)
      f = open(destPath, 'r')
      contents = f.read()
      f.close()
      return contents

   def getTmpFilePath(self):
      return os.path.normpath("%s/pyagg.temp.min.js" % ROOT)
      
   def minifyString(self, bigString):
      tmpPath = self.getTmpFilePath()
      f = open(tmpPath, 'w')
      f.write(bigString)
      f.close()
      contents = self.compressGetContents(tmpPath, tmpPath)
      os.system("rm -f %s" % tmpPath)      
      return contents
      
      
# simple wrapper for the python files      
class File():
   path = ''          # full path to file
   
   def __init__ (self, path):
      self.path = path
   
   def getContents(self):
      f = open(self.path, 'r')
      contents = f.read()
      contents = re.sub("console.debug.*;", "", contents)
      contents = re.sub("console.log.*;", "", contents)
      f.close()
      return contents
   
   def getContentsMinified(self):
      c = Compressor()
      return c.minifyString(self.getContents())
   
   def write(self, contents):
      f = open(self.path, 'a')
      f.write(contents)
      f.close()
   
   def clearContents(self):
      f = open(self.path, 'w')
      f.write('')
      f.close()

   def setMyPerms(self):
      cmd = "chmod 777 %s" % self.path
      print cmd
      os.system("chmod 777 %s" % self.path)
      
   def getSize(self):
      return os.path.getsize(self.path) / 1000

   def getName(self):
      return self.path
      
   def getPath(self):
      return self.path
      
# a Group of files that will be added together into one minified file
class Aggregator():
   root = ''          # root path for this group
   destination = ''   # the location of the aggregated and minified file
   files = []         # array of files to aggregate
   startSize = 0
   
   def __init__ (self, group, groupName):
      self.files = []
      self.startSize = 0
      self.groupName = groupName
      self.root = group['root']
      destPath = os.path.normpath(group['destination'])
      print "ROOT", self.root
      print "DEST", destPath
      self.destination = File(destPath)
      self.destination.clearContents()
      self.addFiles(group['files'])
      self.destination.setMyPerms()      
      
   def addFiles(self, files):
      for file in files:
         self.addFile(file + ".js")
         
   def addFile(self, file):
      print "appending %s" % file
      f = File(os.path.normpath(self.root + "/" + file))
      self.startSize += f.getSize() 

      if MINIFY_THEN_COMBINE and not COMBINE_ONLY:
         self.destination.write(f.getContentsMinified())
      else:
         self.destination.write(f.getContents())
      
      self.files.append(f)
   
   def minify(self):
      if COMBINE_ONLY:
          return
      destPath = self.destination.getPath()
      c = Compressor()
      c.compress(destPath, destPath)
      self.addComment()
      
   def showStats(self):
      print self.destination.getPath()
      string = "\tminified from %d files totalling %d kb to %d kb"
      compressedSize = self.destination.getSize()
      print string % (len(self.files), self.startSize, compressedSize)
      
   def addComment(self):
      timestamp = time.strftime("%m/%d/%Y %I:%M:%S %p %Z", time.gmtime())
      comment = '\n/*\n * generated by pyagg on %s \n' % timestamp
      for f in self.files:
         comment += ' * ' + f.getName() + '\n'
      comment += '*/\n'
      self.destination.write(comment)

if __name__ == "__main__": 
   config = os.path.join(os.path.dirname( __file__ ), 'config.js')
   main(config) 